# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  job-0-ubuntu:
    docker:
      - image: "ubuntu:latest"
        environment:
          TZ: Europe/Bucharest
          DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - run:
          name: Installing SUDO
          command: "apt-get update && apt-get install -y sudo && rm -rf /var/lib/apt/lists/*"
      - run:
          name: "set env vars again"
          command: |
            echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
            echo export DEBIAN_FRONTEND=noninteractive >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Installing tzdata (for the cmake install process)
          command: "sudo apt-get install tzdata"
      - run:
          name: Installing GCC
          command: "sudo apt-get update && apt-get install -y gcc g++"
      - run:
          name: finally install cmake
          command: "sudo apt-get install -y cmake"
      - run:
          name: creates the build
          command: "mkdir -p build && cd build && CC=gcc CXX=g++ cmake -D CMAKE_INSTALL_PREFIX=../tarball/build ..&&make&&make install"
      - run:
          name: see tarball?
          command: "ls && cd tarball && ls && cd build &&ls "
      # - run:
      #     name: runs  container - test
      #     command: "cd tarball/build/bin &&./container_test  "
      - run:
          name: runs  file - test
          command: "cd tarball/build/bin &&./file_test  "
      - run:
          name: cleaning up the mess...
          command: "ls tarball/build/output/ &&cd tarball/build/scripts/ && sudo chmod 775 clean_files.sh && ./clean_files.sh"
      - run:
          name: check if script cleaned up properly
          command: "ls tarball/build/output/ && uname -i"
  # THIS PIPELINE INSTALLS THE NECESSARY PACKAGE FOR SKIPPING PROMPT IN CMAKE INSTALL

  job-1-ubuntu:
    docker:
      - image: "basavyr/ubuntu_devops:devel"
    steps:
      - checkout
      - run:
          name: test my docker image
          command: "apt-get update && ls"
      - run:
          name: check arch cuz why not
          command: "uname -a"
      - run:
          name: creates the build
          command: "mkdir -p build && cd build && cmake -D CMAKE_INSTALL_PREFIX=../tarball/build ..&&make&&make install"
      - run:
          name: see tarball?
          command: "ls && cd tarball && ls && cd build &&ls "
      # - run:
      #     name: runs  container - test
      #     command: "cd tarball/build/bin &&./container_test  "
      - run:
          name: runs  file - test
          command: "cd tarball/build/bin &&./file_test  "
      - run:
          name: cleaning up the mess...
          command: "ls tarball/build/output/ &&cd tarball/build/scripts/ && sudo chmod 775 clean_files.sh && ./clean_files.sh"
      - run:
          name: check if script cleaned up properly
          command: "ls tarball/build/output/ && uname -i"

  job-2-debian:
    docker:
      - image: "debian:latest"
    steps:
      - checkout
      - run:
          name: Installing SUDO
          command: "apt-get update && apt-get install -y sudo && rm -rf /var/lib/apt/lists/*"
      - run:
          name: Installing GCC
          command: "apt-get update && apt-get install -y gcc g++"
      - run:
          name: Install CMAKE
          command: "apt-get update && sudo apt-get install -y cmake"
      - run:
          name: check cmake and gcc
          command: "uname -a && cmake --version && gcc --version"
      - run:
          name: creates the build project
          command: "mkdir -p build && cd build && cmake -D CMAKE_INSTALL_PREFIX=../tarball/build ..&&make&&make install"
      - run:
          name: runs  file - test
          command: "cd tarball/build/bin &&./file_test  "
      - run:
          name: cleaning up the mess...
          command: "ls tarball/build/output/ &&cd tarball/build/scripts/ && sudo chmod 775 clean_files.sh && ./clean_files.sh"
      - run:
          name: check if script cleaned up properly
          command: "ls tarball/build/output/ && uname -i"

workflows:
  version: 2.1
  one_and_two: # this is the name of our workflow
    jobs: # and here we list the jobs we are going to run.
      - job-2-debian
      - job-1-ubuntu
